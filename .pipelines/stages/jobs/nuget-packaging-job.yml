parameters:
- name: ep
  type: string

- name: enable_win_cpu
  displayName: 'Whether Windows CPU package is built.'
  type: boolean
  default: false

- name: enable_win_cuda
  displayName: 'Whether Windows CUDA package is built.'
  type: boolean
  default: false

- name: enable_linux_cpu
  displayName: 'Whether Linux CPU package is built.'
  type: boolean
  default: false

- name: enable_linux_cuda
  displayName: 'Whether Linux CUDA package is built.'
  type: boolean
  default: false

- name: enable_win_dml
  displayName: 'Whether Windows DirectML package is built.'
  type: boolean
  default: false

- name: enable_win_arm64_cpu
  displayName: 'Whether Windows ARM64 package is built.'
  type: boolean
  default: false

- name: ort_version
  type: string

- name: build_config
  type: string
  default: 'release'

jobs:
- job: nuget_${{ parameters.ep }}_packaging
  pool: 'onnxruntime-Win-CPU-2022'
  variables:
  - name: ep
    value: ${{ parameters.ep }}

  - name: ort_version
    value: ${{ parameters.ort_version }}

  - name: buildConfig
    ${{ if eq(parameters.build_config, 'release') }}:
      value: 'Release'
    ${{ elseif eq(parameters.build_config, 'relwithdebinfo') }}:
      value: 'RelWithDebInfo'
    ${{ elseif eq(parameters.build_config, 'debug')}}:
      value: 'Debug'
    ${{ else }}:
      value: 'MinSizeRel'

  - name: genai_nuget_ext
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: ''
    ${{ if eq(parameters.ep, 'cuda') }}:
      value: '.Cuda'
    ${{ if eq(parameters.ep, 'directml') }}:
      value: '.DirectML'

  - name: ort_nuget_ext
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: ''
    ${{ if eq(parameters.ep, 'cuda') }}:
      value: '.Gpu'
    ${{ if eq(parameters.ep, 'directml') }}:
      value: '.DirectML'
  steps:
  - ${{ if eq(parameters.enable_win_cpu, true) }}:
    - template: steps/utils/flex-download-pipeline-artifact.yml
      parameters:
        StepName: 'Download win-cpu-x64 capi Artifacts'
        ArtifactName: onnxruntime-genai-win-cpu-x64-capi
        TargetPath: '$(Build.BinariesDirectory)/artifact-downloads'

  - ${{ if eq(parameters.enable_win_cuda, true) }}:
    - template: steps/utils/flex-download-pipeline-artifact.yml
      parameters:
        StepName: 'Download win-cuda-x64 capi Artifacts'
        ArtifactName: onnxruntime-genai-win-cuda-x64-capi
        TargetPath: '$(Build.BinariesDirectory)/artifact-downloads'

  - ${{ if eq(parameters.enable_linux_cpu, true) }}:
    - template: steps/utils/flex-download-pipeline-artifact.yml
      parameters:
        StepName: 'Download linux-cpu-x64 capi Artifacts'
        ArtifactName: onnxruntime-genai-linux-cpu-x64-capi
        TargetPath: '$(Build.BinariesDirectory)/artifact-downloads'

  - ${{ if eq(parameters.enable_linux_cuda, true) }}:
    - template: steps/utils/flex-download-pipeline-artifact.yml
      parameters:
        StepName: 'Download linux-cuda-x64 capi Artifacts'
        ArtifactName: onnxruntime-genai-linux-cuda-x64-capi
        TargetPath: '$(Build.BinariesDirectory)/artifact-downloads'

  - ${{ if eq(parameters.enable_win_dml, true) }}:
    - template: steps/utils/flex-download-pipeline-artifact.yml
      parameters:
        StepName: 'Download win-directml-x64 capi Artifacts'
        ArtifactName: onnxruntime-genai-win-directml-x64-capi
        TargetPath: '$(Build.BinariesDirectory)/artifact-downloads'

  - ${{ if eq(parameters.enable_win_arm64_cpu, true) }}:
    - template: steps/utils/flex-download-pipeline-artifact.yml
      parameters:
        StepName: 'Download win-cpu-arm64 capi Artifacts'
        ArtifactName: onnxruntime-genai-win-cpu-arm64-capi
        TargetPath: '$(Build.BinariesDirectory)/artifact-downloads'

  - powershell: |
      dotnet build Microsoft.ML.OnnxRuntimeGenAI.csproj -p:Configuration="$(buildConfig)" -p:NativeBuildOutputDir="$(buildDir)\$(buildConfig)"
      displayName: 'Build CSharp'
      workingDirectory: '$(Build.Repository.LocalPath)\src\csharp'

  - task: BinSkim@4
    displayName: 'Run BinSkim'
    inputs:
      AnalyzeTargetGlob: '$(Build.Repository.LocalPath)\src\csharp\**\*.dll'
      continueOnError: true

  - template: steps/compliant/win-esrp-dll-step.yml
    parameters:
      FolderPath: '$(Build.Repository.LocalPath)\src\csharp\bin\$(buildConfig)\'
      DisplayName: 'ESRP - Sign C# dlls'
      Pattern: '*OnnxRuntimeGenAI*.dll'

  - powershell: |
      $artifacts_dir = $(Build.BinariesDirectory)/artifact-downloads
      Write-Host "List downloade artifacts"
      Get-ChildItem -Path $artifacts_dir -Recurse
      $zip_ep = "cpu"
      if ("$(ep)" -eq "cpu") {
          $zip_ep = "cpu"
      }
      elseif ("$(ep)" -eq "directml") {
          $zip_ep = "dml"
      }
      elseif ("$(ep)" -eq "cuda") {
          $zip_ep = "cuda"
      }
      $zips = Get-ChildItem -Path $artifacts_dir -Filter $zip_ep
      Write-Host "Selected artifacts"
      Write-Host $zips

    displayName: 'Extract Artifacts & Prepare Native Libraries'
    workingDirectory: '$(Build.BinariesDirectory)/artifact-downloads'

  - powershell: |
      $VERSION = '0.4.0-dev'
      $nugetPath = Join-Path "C:\Program Files" "NuGet\nuget.exe"
      & $nugetPath pack Microsoft.ML.OnnxRuntimeGenAI.nuspec `
        -Prop version=$VERSION `
        -Prop genai_nuget_ext=$(genai_nuget_ext) `
        -Prop configuration=$(buildConfig) `
        -Prop buildPath=$(buildDir) `
        -Prop ort_nuget_ext=$(ort_nuget_ext) `
        -Prop ort_version=$(ort_version)
      & $nugetPath pack Microsoft.ML.OnnxRuntimeGenAI.Managed.nuspec `
        -Prop version=$VERSION `
        -Prop configuration=$(buildConfig)
      displayName: 'Nuget Packaging'
      workingDirectory: '$(Build.Repository.LocalPath)\nuget'

  - powershell: |
      Get-ChildItem -Path $(Build.Repository.LocalPath) -Recurse
      displayName: 'List all files in the repo for'

  - task: CopyFiles@2
    displayName: 'Copy Nuget to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)\nuget'
      Contents: '*.nupkg'
      TargetFolder: '$(Build.ArtifactStagingDirectory)\nuget'

  - template: steps/compliant/esrp_nuget.yml
    parameters:
      DisplayName: 'ESRP - sign NuGet package'
      FolderPath: '$(Build.ArtifactStagingDirectory)\nuget'
      DoEsrp: 'true'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ONNXRuntime Genai NuGet'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\nuget'
      ArtifactName: $(artifactName)-nuget